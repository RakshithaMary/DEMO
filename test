let clickedElementsData = []; // stores properties of clicked nodes/edges

function appendToStaticTable(element, props) {
    const tbody = document.querySelector('#data-table tbody');
    if (!tbody) return;

    const isNode = element.isNode();
    const type = element.data('label') || (isNode ? 'Node' : 'Edge');
    const name = props[currentQuery.caption_property] || props.name || 'N/A';

    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${type}</td>
        <td>${name}</td>
        <td>${JSON.stringify(props)}</td>
    `;
    tbody.appendChild(row);

    // store data for export
    clickedElementsData.push({
        type,
        name,
        ...props
    });
}


-----------


function downloadTableAsCSV() {
    if (clickedElementsData.length === 0) {
        alert("No data to download yet.");
        return;
    }

    const headers = Object.keys(clickedElementsData[0]);
    const csvRows = [headers.join(",")];

    clickedElementsData.forEach(row => {
        const values = headers.map(header => {
            let val = row[header];
            if (typeof val === 'object') val = JSON.stringify(val).replace(/,/g, ';');
            if (val === null || val === undefined) val = '';
            return `"${val}"`;
        });
        csvRows.push(values.join(","));
    });

    const csvData = csvRows.join("\n");
    const blob = new Blob([csvData], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "graph_elements_data.csv";
    a.click();
    window.URL.revokeObjectURL(url);
}
----------------


document.getElementById('download-table-btn').addEventListener('click', downloadTableAsCSV);
